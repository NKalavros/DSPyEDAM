# Extracted content from a4vignette.pdf

## Using the a4 package

#### Willem Talloen, Tobias Verbeke

 April 15, 2025

### Contents

**1** **Introduction** **2**

**2** **Preparation of the Data** **2**
2.1 ExpressionSet object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
2.2 Some data manipulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2

**3** **Unsupervised data exploration** **3**

**4** **Filtering** **4**

**5** **Detecting differential expression** **5**
5.1 T-test . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
5.2 Limma for comparing two groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
5.3 Limma for linear relations with a continuous variable . . . . . . . . . . . . . . . . . 7

**6** **Class prediction** **8**
6.1 PAM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
6.2 Random forest . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
6.3 Forward filtering with various classifiers . . . . . . . . . . . . . . . . . . . . . . . . 9
6.4 Penalized regression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
6.5 Logistic regression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
6.6 Receiver operating curve . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15

**7** **Visualization of interesting genes** **16**
7.1 Plot the expression levels of one gene . . . . . . . . . . . . . . . . . . . . . . . . . . 16
7.2 Plot the expression levels of two genes versus each other . . . . . . . . . . . . . . . 20
7.3 Plot expression line profiles of multiple genes/probesets across samples . . . . . . . 21
7.4 Smoothscatter plots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
7.5 Gene lists of log ratios . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26

**8** **Pathway analysis** **28**
8.1 Minus log p . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28

**9** **Software used** **29**


-----

### 1 Introduction

The a4 suite of packages is a suite for convenient analysis of Affymetrix microarray experiments
which supplements Goehlmann and Talloen (2010). The suite currently consists of several packages
which are centered around particular tasks:

  - a4Preproc: package for preprocessing of microarray data. Currently the only function in
the package adds complementary annotation information to the ExpressionSet objects (in
function addGeneInfo). Many of the subsequent analysis functions rely on the presence of
such information.

  - a4Core: package made to allow for easy interoperability with the nlcv package which is
[currently being developed on R-Forge at http://r-forge.r-project.org/projects/nlcv.](http://r-forge.r-project.org/projects/nlcv)

  - a4Base: all basic functionality of the a4 suite

  - a4Classif: functionality for classification work that has been split off a.o. in order to reduce
```
   a4Base loading time

```
  - a4Reporting: a package which provides reporting functionality and defines xtable-methods
that are foreseen for tables with hyperlinks to public gene annotation resources.

This document provides an overview of the typical analysis workflow for such microarray experiments using functionality of all of the mentioned packages.

### 2 Preparation of the Data

First we load the package a4 and the example real-life data set ALL.
```
R> library(a4)
R> require(ALL)
R> data(ALL, package = "ALL")

```
For illustrative purposes, simulated data sets can also be very valuable (but not used here).
```
R> require(nlcv)
R> esSim <- simulateData(nEffectRows=50, betweenClassDifference = 5,
     nNoEffectCols = 5, withinClassSd = 0.2)

#### 2.1 ExpressionSet object

```
The data are assumed to be in an expressionSet object. Such an object structure combines different
sources of information into a single structure, allowing easy data manipulation (e.g., subsetting,
copying) and data modelling.
The textttfeatureData slot is typically not yet containing all relevant information about the
genes. This interesting extra gene information can be added using addGeneInfo.
```
R> library("hgu95av2.db")
R> ALL <- addGeneInfo(ALL)

#### 2.2 Some data manipulation

```
The ALL data consists out of samples obtained from two types of cells with very distinct expression
profiles; B-cells and T-cells. To have a more subtle signal, gene expression will also be compared
between the BCR/ABL and the NEG group within B-cells only. To this end, we create the
expressionSet bcrAblOrNeg containing only B-cells with BCR/ABL or NEG.
```
R> Bcell <- grep("^B", as.character(ALL$BT)) # create B-Cell subset for ALL
R> subsetType <- "BCR/ABL" # other subsetType can be "ALL/AF4"
R> bcrAblOrNegIdx <- which(as.character(ALL$mol) %in% c("NEG", subsetType))
R> bcrAblOrNeg <- ALL[, intersect(Bcell, bcrAblOrNegIdx)]
R> bcrAblOrNeg$mol.biol <- factor(bcrAblOrNeg$mol.biol)

```

-----

### 3 Unsupervised data exploration

Spectral maps are very powerful techniques to get an unsupervised picture of how the data look
like. A spectral map of the ALL data set shows that the B- and the T-subtypes cluster together
along the x-axis (the first principal component). The plot also indicates which genes contribute in
which way to this clustering. For example, the genes located in the same direction as the T-cell
samples are higher expressed in these T-cells. Indeed, the two genes at the left (TCF7 and CD3D)
are well known to be specifically expressed by T-cells (Wetering 1992, Krissansen 1986).

```
R> spectralMap(object = ALL, groups = "BT")
R>
R> # optional argument settings
R> # plot.mpm.args=list(label.tol = 12, zoom = c(1,2), do.smoothScatter = TRUE),
R> # probe2gene = TRUE)

```
11005

26003

28032280282803624022840046500504007

0900243006490041600728008560072000565003020200100344001190081901724006120081600264005LAL4TCF7310154301510005110022804222010150043LAL510076300143008012280280432400512026270030801843007128006280013701331011220096200262003270045280072201168003900526001250032804403002240187001120191204016480011401647060022400112012090170800108024280242201328023120074300426005240112800524008[36002]240101200608011010054300115001HLA−DRA64001CCN2HLA−DPB149006CD74YBX3HLA−DPB1CD9

04018180011900201007CD3D8300119014 2800316004280316200115005240170900804008

37001

17003 2803720002

28009 280353600125006300010101028021

16009

33005

2600804010

26009 24019 640020400628019

68001

15006

PC1 16%

A spectral map of the bcrAblOrNeg data subset does not show a clustering of BCR/ABL or
NEG cells.

```
R> spectralMap(object = bcrAblOrNeg, groups = "mol.biol", probe2gene = TRUE)

```

-----

PC1 15%


### 4 Filtering

The data can be filtered, for instance based on variance and intensity, in order to reduce the
high-dimensionality.

```
R> selBcrAblOrNeg <- filterVarInt(object = bcrAblOrNeg)
R> propSelGenes <- round((dim(selBcrAblOrNeg)[1]/dim(bcrAblOrNeg)[1])*100,1)

```
This filter selected 18.9 % of the genes (2391 of the in total 12625 genes).


-----

### 5 Detecting differential expression

#### 5.1 T-test

```
R> tTestResult <- tTest(selBcrAblOrNeg, "mol.biol")
R> histPvalue(tTestResult[,"p"], addLegend = TRUE)
R> propDEgenesRes <- propDEgenes(tTestResult[,"p"])

##### 32.7% DE genes

```
0.0 0.2 0.4 0.6 0.8 1.0

|Col1|Col2|Col3|32.7% DE genes|Col5|Col6|Col7|Col8|Col9|Col10|Col11|Col12|Col13|Col14|Col15|Col16|Col17|Col18|Col19|Col20|Col21|Col22|Col23|Col24|Col25|Col26|Col27|Col28|Col29|Col30|Col31|Col32|Col33|Col34|Col35|Col36|Col37|Col38|Col39|Col40|Col41|Col42|Col43|Col44|Col45|Col46|Col47|Col48|Col49|Col50|Col51|Col52|Col53|
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||


Using an ordinary t-test, there are 171 genes significant at a FDR of 10%. The proportion of
genes that are trully differentially expressed is estimated to be around 32.7.
The toptable and the volcano plot show that three most significant probe sets all target ABL1.
This makes sense as the main difference between BCR/ABL and NEG cells is a mutation in this
particular ABL gene.
```
R> tabTTest <- topTable(tTestResult, n = 10)
R> print(xtable(tabTTest,
   caption="The top 5 features selected by an ordinary t-test.",
  label ="tablassoClass"))

```
```
R> volcanoPlot(tTestResult, topPValues = 5, topLogRatios = 5)

```

-----

4e−14

1


gSymbol p logRatio pBH tStat
1636_g_at ABL1 0.00 -1.10 0.00 9.26
39730_at ABL1 0.00 -1.15 0.00 8.69
1635_at ABL1 0.00 -1.20 0.00 7.28
40202_at KLF9 0.00 -1.78 0.00 6.18
37027_at AHNAK 0.00 -1.35 0.00 5.65
39837_s_at ZNF467 0.00 -0.48 0.00 5.50
40480_s_at FYN 0.00 -0.87 0.00 5.30
33774_at CASP8 0.00 -1.00 0.00 5.26
36591_at TUBA4A 0.00 -1.15 0.00 5.25
37014_at MX1 0.00 1.41 0.00 -5.04

Table 1: The top 5 features selected by an ordinary t-test.

ABL1

ABL1

ABL1

KLF9

AHNAK

MX1

CCN2

JCHAIN

IGLL1

−3 −2 −1 0 1 2 3


#### 5.2 Limma for comparing two groups

In this particular data set, the modified t-test using limmaTwoLevels provides very similar results.
This is because the sample size is relatively large.
```
R> limmaResult <- limmaTwoLevels(selBcrAblOrNeg, "mol.biol")
R> volcanoPlot(limmaResult)
R> # histPvalue(limmaResult)
R> # propDEgenes(limmaResult)

```

-----

3e−14

1


CRIP1

CCN2

JCHAIN

CNN3

IGLL1

−3 −2 −1 0 1 2 3


ABL1

ABL1

ABL1

KLF9

AHNAK

TUBA4ACASP8ZNF467FYN MX1

ZEB1

|BA4A FYN CASP8ZNF467 EB1|Col2|Col3|
|---|---|---|
|P1 N3|||
||||


It is very useful to put lists of genes in annotated tables where the genes get hyperlinks to
[EntrezGene.](http://www.ncbi.nlm.nih.gov/sites/entrez?db=gene)
```
R> tabLimma <- topTable(limmaResult, n = 10, coef = 2) # 1st is (Intercept)

```
Gene logFC AveExpr P.Value adj.P.Val GENENAME
[ABL1](http://www.ncbi.nlm.nih.gov/gene/25) -1.10 9.20 0.00 0.00 ABL proto-oncogene 1, non-receptor tyr
[ABL1](http://www.ncbi.nlm.nih.gov/gene/25) -1.15 9.00 0.00 0.00 ABL proto-oncogene 1, non-receptor tyr
[ABL1](http://www.ncbi.nlm.nih.gov/gene/25) -1.20 7.90 0.00 0.00 ABL proto-oncogene 1, non-receptor tyr
[KLF9](http://www.ncbi.nlm.nih.gov/gene/687) -1.78 8.62 0.00 0.00 KLF transcription factor 9
[AHNAK](http://www.ncbi.nlm.nih.gov/gene/79026) -1.35 8.44 0.00 0.00 AHNAK nucleoprotein
[TUBA4A](http://www.ncbi.nlm.nih.gov/gene/7277) -1.15 9.23 0.00 0.00 tubulin alpha 4a
[FYN](http://www.ncbi.nlm.nih.gov/gene/2534) -0.87 7.76 0.00 0.00 FYN proto-oncogene, Src family tyrosin
[CASP8](http://www.ncbi.nlm.nih.gov/gene/841) -1.00 8.04 0.00 0.00 caspase 8
[ZNF467](http://www.ncbi.nlm.nih.gov/gene/168544) -0.48 7.14 0.00 0.00 zinc finger protein 467
[MX1](http://www.ncbi.nlm.nih.gov/gene/4599) 1.41 6.73 0.00 0.00 MX dynamin like GTPase 1

#### 5.3 Limma for linear relations with a continuous variable

Testing for (linear) relations of gene expression with a (continuous) variable is typically done
using regression. A modified t-test approach improves the results by penalizing small slopes. The
modified regressions can be applied using limmaReg.
```
R>

```

-----

### 6 Class prediction

There are many classification algorithms with profound conceptual and methodological differences.
Given the differences between the methods,there’s probably no single classification method that
always works best, but that certain methods perform better depending on the characteristics of
the data.
On the other hand, these methods are all designed for the same purpose, namely maximizing
classification accuracy. They should consequently all pick up (the same) strong biological signal
when present, resulting in similar outcomes.
Personally, we like to apply four different approaches; PAM, RandomForest, forward filtering
in combination with various classifiers, and LASSO.
All four methods have the property that they search for the smallest set of genes while having
the highest classification accuracy. The underlying rationale and algorithm is very different between
the four approaches, making their combined use potentially complementary.


#### 6.1 PAM

PAM (Tibshirani 2002) applies univariate and dependent feature selection.

```
R> resultPam <- pamClass(selBcrAblOrNeg, "mol.biol")
R> plot(resultPam)
R> featResultPam <- topTable(resultPam, n = 15)
R> xtable(head(featResultPam$listGenes),
   caption = "Top 5 features selected by PAM.")

```
0.5


0.4

0.3


0.2


0.1

#### 6.2 Random forest

|Col1|x|Col3|Col4|Col5|Col6|Col7|Col8|Col9|Col10|Col11|Col12|Col13|Col14|Col15|Col16|Col17|Col18|Col19|Col20|Col21|Col22|Col23|Col24|Col25|Col26|Col27|Col28|Col29|Col30|Col31|Col32|
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
|||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||


number of genes


Random forest with variable importance filtering (Breiman 2001, Diaz-Uriarte 2006) applies multivariate and dependent feature selection. Be cautious when interpreting its outcome, as the obtained
results are unstable and sometimes overoptimistic.


-----

```
R> resultRF <- rfClass(selBcrAblOrNeg, "mol.biol")
R> plot(resultRF, which = 2)
R> featResultRF <- topTable(resultRF, n = 15)
R> xtable(head(featResultRF$topList),
   caption = "Features selected by Random Forest variable importance.")

```
GeneSymbol
1635_at ABL1
1636_g_at ABL1
33284_at MPO
34216_at KLF7
37043_at ID3
37351_at UPP1


Table 2: Features selected by Random Forest variable importance.

```
R>

```

0.25

0.20


0.15

0.10


0.05

|Col1|x|Col3|Col4|Col5|Col6|Col7|Col8|Col9|Col10|Col11|Col12|Col13|Col14|Col15|Col16|Col17|Col18|Col19|Col20|Col21|Col22|Col23|Col24|Col25|Col26|Col27|Col28|Col29|Col30|Col31|Col32|Col33|Col34|
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|
|||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||


number of genes

#### 6.3 Forward filtering with various classifiers


Forward filtering in combination with various classifiers (like DLDA, SVM, random forest, etc.)
apply an independent feature selection. The selection can be either univariate or multivariate
depending on the chosen selection algorithm; we usually choose Limma as a univariate although
random forest variable importance could also be used as a multivariate selection criterium.
```
R> mcrPlot_TT <- mcrPlot(nlcvTT, plot = TRUE, optimalDots = TRUE,
   layout = TRUE, main = "t-test selection")

```

-----

##### t−test selection

1.0 dlda
randomForest
bagg
pam

0.8

svm


0.6

0.4


0.2

0.0


2 5 7 10 15 20 25 30 35
Number of features


nFeat_optim mean_MCR sd_MCR
dlda 7.00 0.14 0.05
randomForest 3.00 0.15 0.05
bagg 25.00 0.16 0.05
pam 2.00 0.16 0.07
svm 2.00 0.13 0.07

Table 3: Optimal number of genes per classification method together with the respective misclassification error rate (mean and standard deviation across all CV loops).

```
R> scoresPlot(nlcvTT, tech = "svm", nfeat = 2)

```

-----

##### Freq. of being correctly classified (svm, 2 feat.)


1.0

0.8


0.6

0.4


0.2

0.0


BCR/ABL
NEG

#### 6.4 Penalized regression


0.5 <= score <=  1
0 <= score < 0.5

|01005 08011 12006 12026 20002 24001 24017 27003 28021 31011 49006 62003 84004 BCR/ABL|Col2|
|---|---|
||04008 06002 09017 16009 24008 25006 28005 28023 28035 28043 33005 43007 57001 68001 0.5 <= score <= 1|


LASSO (Tibshirani 2002) or elastic net (Zou 2005) apply multivariate and dependent feature
selection.
```
R> resultLasso <- lassoClass(object = bcrAblOrNeg, groups = "mol.biol")
R> plot(resultLasso, label = TRUE,
   main = "Lasso coefficients in relation to degree of penalization.")
R> featResultLasso <- topTable(resultLasso, n = 15)

```

-----

##### Lasso coefficients in relation to degree of penalization.

0 20 30 34 35

73

84

5134

47

58

373238274873811010115495417052714224331165

30

4063708110

7475999211

47

11


45

98


69

0 5 10 15 20

|Col1|7 8 35 4 5 379 1223 33 4 4455 6778111 3 46781 77991 4 1 4 9 6|Col3|Col4|Col5|
|---|---|---|---|---|
||||||
||||||
||||||
||||||


L1 Norm


Gene Coefficient
ITGA7 -3.80
ABL1 -2.76
TCL1B -2.26
RAB32 -1.01
CHD3 -0.77
SERPINE2 -0.65
NFATC1 -0.64
ZNF467 -0.60
YES1 -0.58
ANXA1 -0.58
PTDSS1 0.53
PTPRJ -0.51
F13A1 -0.49
DSTN 0.47
ALDH1A1 -0.46

Table 4: Features selected by Lasso, ranked from largest to smallest penalized coefficient.


-----

#### 6.5 Logistic regression

Logistic regression is used for predicting the probability to belong to a certain class in binary
classification problems.

```
R> logRegRes <- logReg(geneSymbol = "ABL1", object = bcrAblOrNeg, groups = "mol.biol")

##### ABL1 (1635_at)

```

1.0

0.8


0.6

0.4


0.2

0.0


NEG

BCR/ABL


6 7 8 9


log2 intensity

The obtained probabilities can be plotted with ProbabilitiesPlot. A horizontal line indicates
the 50% threshold, and samples that have a higher probability than 50% are indicated with blue
dots. Apparently, using the expression of the gene ABL1, quite a lot of samples predicted to with
a high probability to be NEG, are indeed known to be NEG.

```
R> probabilitiesPlot(proportions = logRegRes$fit, classVar = logRegRes$y,
   sampleNames = rownames(logRegRes), main = "Probability of being NEG")

```

-----

##### Probability of being NEG

1.0

0.8

0.6

0.4

0.2

0.0
```
R> probabilitiesPlot(proportions = logRegRes$fit, classVar = logRegRes$y, barPlot= TRUE,
   sampleNames = rownames(logRegRes), main = "Probability of being NEG")

```
|22010 24001 27003 1202 28036 12006 43001 28021 2801 0300 3000 4900 15005 62002 62001 0100 12007 8400 6500 28024|Col2|
|---|---|
||1600 68001 24008 15001 04010 28042 28043 28005 28007 0802 28006 43007 2200 28035 04016 08012 28023 28044 3600 26001|


-----

#### 6.6 Receiver operating curve

A ROC curve plots the fraction of true positives (TPR = true positive rate) versus the fraction of
false positives (FPR = false positive rate) for a binary classifier when the discrimination threshold
is varied. Equivalently, one can also plot sensitivity versus (1 - specificity).

```
R> ROCres <- ROCcurve(geneSymbol = "ABL1", object = bcrAblOrNeg, groups = "mol.biol")

```

-----

##### ABL1 (1635_at)

0.0 0.2 0.4 0.6 0.8 1.0


Average false positive rate

### 7 Visualization of interesting genes

#### 7.1 Plot the expression levels of one gene


Some potentially interesting genes can be visualized using plot1gene. Here the most significant
gene is plotted.
```
R> plot1gene(probesetId = rownames(tTestResult)[1],
   object = selBcrAblOrNeg, groups = "mol.biol", legendPos = "topright")

```

-----

##### ABL1 (1636_g_at)


10.5

10.0


BCR/ABL
NEG


9.5

9.0


8.5

8.0


7.5

There are some variations possible on the default plot1gene function. For example, the labels
of x-axis can be changed or omitted.

|Col1|Col2|Col3|Col4|Col5|Col6|Col7|Col8|Col9|Col10|Col11|Col12|Col13|Col14|Col15|Col16|Col17|Col18|Col19|Col20|Col21|Col22|Col23|Col24|Col25|Col26|Col27|Col28|Col29|Col30|Col31|Col32|Col33|Col34|Col35|Col36|Col37|Col38|Col39|Col40|Col41|Col42|Col43|Col44|Col45|Col46|Col47|Col48|Col49|Col50|Col51|Col52|Col53|Col54|Col55|Col56|Col57|Col58|Col59|Col60|Col61|Col62|Col63|Col64|Col65|Col66|Col67|Col68|Col69|Col70|Col71|Col72|Col73|Col74|Col75|Col76|Col77|Col78|
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|

```
R> plot1gene(probesetId = rownames(tTestResult)[1], object = selBcrAblOrNeg,
   groups = "mol.biol", sampleIDs = "mol.biol", legendPos = "topright")

```

-----

##### ABL1 (1636_g_at)


10.5

10.0


BCR/ABL
NEG


9.5

9.0


8.5

8.0


7.5

|Col1|Col2|Col3|Col4|Col5|Col6|Col7|Col8|Col9|Col10|Col11|Col12|Col13|Col14|Col15|Col16|Col17|Col18|Col19|Col20|Col21|Col22|Col23|Col24|Col25|Col26|Col27|Col28|Col29|Col30|Col31|Col32|Col33|Col34|Col35|Col36|Col37|Col38|Col39|Col40|Col41|Col42|Col43|Col44|Col45|Col46|Col47|Col48|Col49|Col50|Col51|Col52|Col53|Col54|Col55|Col56|Col57|Col58|Col59|Col60|Col61|Col62|Col63|Col64|Col65|Col66|Col67|Col68|Col69|Col70|Col71|Col72|Col73|Col74|Col75|Col76|Col77|Col78|
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|


Another option is to color the samples by another categorical variable than used for ordering.
```
R> plot1gene(probesetId = rownames(tTestResult)[1], object = selBcrAblOrNeg,
   groups = "mol.biol", colgroups = 'BT', legendPos = "topright")

```

-----

##### ABL1 (1636_g_at)


10.5

10.0


B
B1
B2
B3
B4


9.5

9.0


8.5

8.0


7.5

The above graphs plot one sample per tickmark in the x-axis. This is very useful to explore the
data as one can directly identify interesting samples. If it is not interesting to know which sample
has which expression level, one may want to plot in the x-axis not the samples but the groups of
interest. It is possible to pass arguments to the boxplot function to custopmize the graph. For
example the boxwex argument allows to reduce the width of the boxes in the plot.

|Col1|Col2|Col3|Col4|Col5|Col6|Col7|Col8|Col9|Col10|Col11|Col12|Col13|Col14|Col15|Col16|Col17|Col18|Col19|Col20|Col21|Col22|Col23|Col24|Col25|Col26|Col27|Col28|Col29|Col30|Col31|Col32|Col33|Col34|Col35|Col36|Col37|Col38|Col39|Col40|Col41|Col42|Col43|Col44|Col45|Col46|Col47|Col48|Col49|Col50|Col51|Col52|Col53|Col54|Col55|Col56|Col57|Col58|Col59|Col60|Col61|Col62|Col63|Col64|Col65|Col66|Col67|Col68|Col69|Col70|Col71|Col72|Col73|Col74|Col75|Col76|Col77|Col78|
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|

```
R> boxPlot(probesetId = rownames(tTestResult)[1], object = selBcrAblOrNeg, boxwex = 0.3,
   groups = "mol.biol", colgroups = "BT", legendPos = "topright")

```

-----

10.5

10.0


9.5

9.0


8.5

8.0


7.5


##### ABL1 (1636_g_at)

BCR/ABL NEG

|Col1|B B1 B2 B3 B4|Col3|Col4|
|---|---|---|---|
|||||
|||||
|||||
|||||
|||||
|||||
|||||


groups

#### 7.2 Plot the expression levels of two genes versus each other
```
R> plotCombination2genes(geneSymbol1 = featResultLasso$topList[1, 1],
   geneSymbol2 = featResultLasso$topList[2, 1],
   object = bcrAblOrNeg, groups = "mol.biol",
   main = "Combination of\nfirst and second gene", addLegend = TRUE,
   legendPos = "topright")

```

-----

9

8


7

6

|Col1|Combination of first and second gene|Col3|Col4|Col5|
|---|---|---|---|---|
||BCR/ABL NEG||||
||||||
||||||
||||||
||||||


6.0 6.5 7.0


ITGA7

#### 7.3 Plot expression line profiles of multiple genes/probesets across sam- ples

Multiple genes can be plotted simultaneously on a graph using line profiles. Each line reflects one
gene and are colored differenly. As an example, here three probesets that measure the gene LCK,
found to be differentially expressed between B- and T-cells. Apparently, one probeset does not
measure the gene appropriately.

```
R> myGeneSymbol <- "LCK"
R> probesetPos <- which(myGeneSymbol == featureData(ALL)$SYMBOL)
R> myProbesetIds <- featureNames(ALL)[probesetPos]
R> profilesPlot(object = ALL, probesetIds = myProbesetIds,
   orderGroups = "BT", sampleIDs = "BT")

```

-----

11

10


1266_s_at
2059_s_at
33238_at


9

8


7

6


5


-----

#### 7.4 Smoothscatter plots

It may be of interest to look at correlations between samples. As each dot represents a gene, there
are typically many dots. It is therefore wise to color the dots in a density dependent way.
```
R> plotComb2Samples(ALL, "11002", "01003",
   xlab = "a T-cell", ylab = "another T-cell")

```
Figure 1: Correlations in gene expression profiles between two T-cell samples (samples 11002 and
01003).


-----

If there are outlying genes, one can label them by their gene symbol by specifying the expression
intervals (X- or Y- axis or both) that contain the genes to be highlighted using trsholdX and
```
trsholdY.
R> plotComb2Samples(ALL, "84004", "01003",
   trsholdX = c(10,12), trsholdY = c(4,6),
   xlab = "a B-cell", ylab = "a T-cell")

```
Figure 2: Correlations in gene expression profiles between a B-cell and a T-cell (samples 84004
and 01003). Some potentially interesting genes are indicated by their gene symbol.


-----

One can also show multiple pairwise comparisons in a pairwise scatterplot matrix.
```
R> plotCombMultSamples(exprs(ALL)[,c("84004", "11002", "01003")])
R> # text.panel= function(x){x, labels = c("a B-cell", "a T-cell", "another T-cell")})

```
Figure 3: Correlations in gene expression profiles between a B-cell and two T-cell samples (respectively samples 84004, 11002 and 01003).


-----

#### 7.5 Gene lists of log ratios

When analyzing treatments that are primarily interesting relative to a control treatment, it may
be of value to look at the log ratios of several treatments (in columns) for a selected list of genes
(in rows).
```
R> ALL$BTtype <- as.factor(substr(ALL$BT,0,1))
R> ALL2 <- ALL[,ALL$BT != 'T1'] # omit subtype T1 as it only contains one sample
R> ALL2$BTtype <- as.factor(substr(ALL2$BT,0,1)) # create a vector with only T and B
R> # Test for differential expression between B and T cells
R> tTestResult <- tTest(ALL, "BTtype", probe2gene = FALSE)
R> topGenes <- rownames(tTestResult)[1:20]
R> # plot the log ratios versus subtype B of the top genes
R> LogRatioALL <- computeLogRatio(ALL2, reference = list(var="BT", level="B"))
R> a <- plotLogRatio(e = LogRatioALL[topGenes,], openFile = FALSE, tooltipvalues = FALSE,
   device = "pdf", filename = "GeneLRlist",
   colorsColumnsBy = "BTtype",
   main = 'Top 20 genes most differentially between T- and B-cells',
   orderBy = list(rows = "hclust"), probe2gene = TRUE)

```
Top 20 genes most differentially between T− and B−cells

B1 B2 B3 B4 T T2 T3 T4

HLA−DPB1 − major histocompatibility complex, classHLA−DPB1 − major histocompatibility complex, classCD19 − CD19 moleculeBLNK − B cell linkerCD79B − CD79b moleculeCD9 − CD9 moleculeNA − NACD74 − CD74 moleculeHLA−DRA − major histocompatibility complex, class IGHM − immunoglobulin heavy constant muHLA−DPA1 − major histocompatibility complex, classHLA−DMA − major histocompatibility complex, class LCK − LCK proto−oncogene, Src family tyrosine kinaLCK − LCK proto−oncogene, Src family tyrosine kinaTRAT1 − T cell receptor associated transmembrane aPRKCQ − protein kinase C thetaCD3G − CD3 gamma subunit of T−cell receptor compleCD3D − CD3 delta subunit of T−cell receptor compleSH2D1A − SH2 domain containing 1ATRDC − T cell receptor delta constant

Error bars show the pooled standard deviation

Tue Apr 15 17:17:52 2025 ; R version 4.5.0 RC (2025−04−04 r88126) ; Biobase version 2.68.0

Figure 4: Log ratios of the 20 genes that are most differentially expressed between B-cell and two
T-cells.

The following example demonstrates how to display log ratios for four compounds for which
gene expression was measured on four timepoints.
```
R> load(system.file("extdata", "esetExampleTimeCourse.rda", package = "a4"))
R> logRatioEset <- computeLogRatio(esetExampleTimeCourse, within = "hours",
   reference = list(var = "compound", level = "DMSO"))
R> # re-order
R> idx <- order(pData(logRatioEset)$compound, pData(logRatioEset)$hours)
R> logRatioEset <- logRatioEset[,idx]
R> # plot LogRatioEset across all
R> cl <- "TEST"
R> compound <- "COMPOUND"
R> shortvarnames <- unique(interaction(pData(logRatioEset)$compound, pData(logRatioEset)$hours))
R> shortvarnames <- shortvarnames[-grep("DMSO", shortvarnames), drop=TRUE]
R> plotLogRatio(e = logRatioEset, mx = 1, filename = "logRatioOverallTimeCourse.pdf",
    gene.fontsize = 8,
    orderBy = list(rows = "hclust", cols = NULL), colorsColumnsBy = c('compound'),
    within = "hours", shortvarnames = shortvarnames, exp.width = 1,
    main = paste("Differential Expression (trend at early time points) in",
      cl, "upon treatment with", compound),
    reference = list(var = "compound", level = "DMSO"), device = 'pdf')

```

-----

Figure 5: Log ratios for four compounds at four time points (for 20 genes).


-----

### 8 Pathway analysis

#### 8.1 Minus log p

The MLP method is one method of pathway analysis that is commonly used by the a4 suite user
base. Although the method is explained in detail in the MLP package vignette we briefly walk
throught the analysis steps using the same example dataset used in the preceding parts of the
analysis. In order to detect whether certain gene sets are enriched in genes with low p values, we
obtain the vector of p values for the genes and the corresponding relevant gene sets:
```
R> require(MLP)
R> # create groups
R> labels <- as.factor(ifelse(regexpr("^B", as.character(pData(ALL)$BT))==1, "B", "T"))
R> pData(ALL)$BT2 <- labels
R> # generate p-values
R> limmaResult <- limmaTwoLevels(object = ALL, group = "BT2")
R> pValues <- limmaResult@MArrayLM$p.value
R> pValueNames <- fData(ALL)[rownames(pValues), 'ENTREZID']
R> pValues <- pValues[,2]
R> names(pValues) <- pValueNames
R> pValues <- pValues[!is.na(pValueNames)]
R> geneSet <- getGeneSets(species = "Human",
   geneSetSource = "GOBP",
   entrezIdentifiers = names(pValues)
 )
R> tail(geneSet, 3)
$`GO:2001303`
[1] "239" "246" "247"
$`GO:2001304`
[1] "239" "4051"
$`GO:2001306`
[1] "239"

```
Next, we run the MLP analysis:
```
R> mlpOut <- MLP(
   geneSet = geneSet,
   geneStatistic = pValues,
   minGenes = 5,
   maxGenes = 100,
   rowPermutations = TRUE,
   nPermutations = 50,
   smoothPValues = TRUE,
   probabilityVector = c(0.5, 0.9, 0.95, 0.99, 0.999, 0.9999, 0.99999),
   df = 9)

```
The results can be visualized in many ways, but for Gene Ontology based gene set definitions,
the following graph may be useful:
```
R> library(Rgraphviz)
R> library(GOstats)
R> pdf(file = "GOgraph.pdf")
R> plot(mlpOut, type = "GOgraph", nRow = 25)
R> dev.off()

```

-----

### 9 Software used

  - R version 4.5.0 RC (2025-04-04 r88126), x86_64-pc-linux-gnu

  - Locale: LC_CTYPE=en_US.UTF-8, LC_NUMERIC=C, LC_TIME=en_GB, LC_COLLATE=C,
```
   LC_MONETARY=en_US.UTF-8, LC_MESSAGES=en_US.UTF-8, LC_PAPER=en_US.UTF-8,
   LC_NAME=C, LC_ADDRESS=C, LC_TELEPHONE=C, LC_MEASUREMENT=en_US.UTF-8,
   LC_IDENTIFICATION=C

```
  - Time zone: America/New_York

  - TZcode source: system (glibc)

  - Running under: Ubuntu 24.04.2 LTS

  - Matrix products: default

  - BLAS: /home/biocbuild/bbs-3.21-bioc/R/lib/libRblas.so

  - LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0

  - Base packages: base, datasets, grDevices, graphics, methods, stats, stats4, utils

  - Other packages: ALL 1.49.0, AnnotationDbi 1.70.0, Biobase 2.68.0, BiocGenerics 0.54.0,
IRanges 2.42.0, MLInterfaces 1.88.0, MLP 1.56.0, Rcpp 1.0.14, S4Vectors 0.46.0,
XML 3.99-0.18, a4 1.56.0, a4Base 1.56.0, a4Classif 1.56.0, a4Core 1.56.0, a4Preproc 1.56.0,
a4Reporting 1.56.0, annotate 1.86.0, cluster 2.1.8.1, generics 0.1.3, hgu95av2.db 3.13.0,
nlcv 0.3.5, org.Hs.eg.db 3.21.0, xtable 1.8-4

  - Loaded via a namespace (and not attached): Biostrings 2.76.0, DBI 1.2.3,
DelayedArray 0.34.0, GO.db 3.21.0, GenomeInfoDb 1.44.0, GenomeInfoDbData 1.2.14,
GenomicRanges 1.60.0, KEGGREST 1.48.0, KernSmooth 2.23-26, MASS 7.3-65,
Matrix 1.7-3, MatrixGenerics 1.20.0, R6 2.6.1, RColorBrewer 1.1-3, ROCR 1.0-11,
RSQLite 2.3.9, S4Arrays 1.8.0, SparseArray 1.8.0, SummarizedExperiment 1.38.0,
UCSC.utils 1.4.0, XVector 0.48.0, abind 1.4-8, annaffy 1.80.0, bit 4.6.0, bit64 4.6.0-1,
bitops 1.0-9, blob 1.2.4, caTools 1.18.3, cachem 1.1.0, class 7.3-23, cli 3.6.4, codetools 0.2-20,
compiler 4.5.0, crayon 1.5.3, data.table 1.17.0, digest 0.6.37, e1071 1.7-16, fastmap 1.2.0,
foreach 1.5.2, future 1.40.0, future.apply 1.11.3, genefilter 1.90.0, glmnet 4.1-8,
globals 0.16.3, gplots 3.2.0, grid 4.5.0, gtools 3.9.5, httr 1.4.7, ipred 0.9-15, iterators 1.0.14,
jsonlite 2.0.0, kernlab 0.9-33, lattice 0.22-7, lava 1.8.1, limma 3.64.0, listenv 0.9.1,
magrittr 2.0.3, matrixStats 1.5.0, memoise 2.0.1, mpm 1.0-23, multtest 2.64.0, nnet 7.3-20,
pamr 1.57, parallel 4.5.0, parallelly 1.43.0, pkgconfig 2.0.3, png 0.1-8, prodlim 2024.06.25,
proxy 0.4-27, randomForest 4.7-1.2, rlang 1.1.6, rpart 4.1.24, shape 1.4.6.1, splines 4.5.0,
statmod 1.5.0, survival 3.8-3, tools 4.5.0, varSelRF 0.7-8, vctrs 0.6.5


-----

